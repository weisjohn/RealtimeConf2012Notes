IO Insights from @rauchg

	learnboost.com

	engine.io just got released 

	when developing with realtime frameworks, we need to know what's going on

	1st strategy 

		built-in instrumentation

		require('debug')('wat')

			TJ Holowaychuk's debug module

			https://github.com/visionmedia/debug

			scoping for your node logs 

	2nd strategy

		capture and displays engine.io traffic

		realtime insight into browser / device usage

			how many of your browsers are using socket connections?

		client insight

			1st strategy

			localStorage.debug

				engine.io codebase and the debug module runs both 

				localStorage is like the process.env for the client

			2nd strategy

				Chrome extension

				IO icon inside of WebInspector

				Analyze and document perfroamcne implications




How my ops guy totally changed my talk last week with a single Nginx module - from @northisup

	https://speakerdeck.com/northisup/krtconf-making-disqus-realtime

	https://twitter.com/northisup

	why do realtime?

		getting new data to the user asap

	disqus architecture
		thoonk redis queue
		python glue
		long(er) polling


		thoonk 

			is a queue on top of redis

			implemented as a DFA (http://en.wikipedia.org/wiki/Deterministic_finite_automaton)

			provides job semantics
				useful for end to end acking
				reliable job processing in distributed system
			did I mention it's on top of redis?


		python glue

			listens to a thoonk queue
			cleans & formats message
				this is the final format for end clients
				compress data now
			publish message to nginx and other firehoses
				forum:id, thread:id, 

		nginx 

			redis / nginx pubsub is effectively free

		disqus.com/jobs


 @solomonstre ZeroRPC - guy from dotCloud

	https://twitter.com/solomonstre

	https://www.dotcloud.com/

	http://js.dotcloud.com/

	http://stackio.dotcloud.com/ - 

		stack.io is a language-agnostic framework for distributed and authenticated communication between web and back-end clients. Brought to you by the fine folks at dotCloud.

	ZeroRPC https://github.com/dotcloud/zerorpc-python

	https://twitter.com/lukekarrys/status/260809468122656769



Julien Genestoux - @julien51 - the Social Web is the Realtime Web

	http://ouvre-boite.com/
	
	Superfeedr

	http://www.foundora.com/2010/09/06/julien-genestoux-founder-superfeedr/

	https://twitter.com/

	social networks were supposed to make communication easier are actually now gatekeepers

	people chose their devices over apps

		mobile OS are the new gate keepers

	API as shackles

	we should favor protocols over APIs 

	"I reject your reality and substitute my own." - Adam Savage

	Browser extensions can act on my behalf because they have all the cookies

	http://unhosted.org/

	http://lockerproject.org/

	You have a server which basically becomes a router to different 

	In a real pub-sub world, you don't have to always be online... the server pushes out data and if you've subscribed 


Airbnb guy

	http://nerds.airbnb.com/slides-and-video-from-spike-brehms-tech-talk
	
	Single Page apps

		Easy way 

			JavaScript app runs entirely in the client
			Server technology agnostic
			can use Backbone
			Poor SEO
			performance hit to download and evaluate JS before rendering

		The Hard Way - the Holy Grail

			bulk of application runs in the server and in the client

			navigate to any page in the application, renders HTML

			must render full page of HTML without access to DOM (or find a faster DOM implementation)


	Prototype structure 

		app directory - runs on both sides
			view using HTML

			module runs in the context of an express router and 


The Bilingual Browser - Dave Cridland - VP Engineering (XMPP) - Isode Ltd

	A delusion offered for sharing

	I think web browsers should speak XMPP and HTTP natively.

	Isode 
		28 employees, 20 engineers
		XMPP
			M-Link
			Swift
		Strong commitment to Open Standards 	
			LDAP, SASL

	Dave Cridland
		Delusional
			wrote the only full ACAP server
			and the only full client

	Use HTTP for application > addressability | delivery

	Use XMPP
		for identity > browser and user
		for microcontent delivery

	You're not going to settle for anything less than aswesome in the applications you create,
		so why seettle for a piss-poor platform?



William Chen and ?

	RTT = round trip time

	if you want to be realtime with something, you want to worry about RTT

	Trend continues to get larger, 

	Requests per page is increasing

	84 requests / page, 

	the stakes are higher, mo money, mo problems

	SPDY is a session-layer replacement for HTTP's connection handling

		faster
		more secure
		long-term

	Header compression
		much of the headers are repeated
		user-agent
		cookie
		http ethods
		http version string

		reduces bandwidth required for headers
		10-35% size reduction typical for the first request
		80-97% csize reduction on longer-lved connections

	Pipelining

		prioritized request multiplexing

		Contention vs. Underutilization

	Multiplexing with prioritization
		prioritization allows the browser to roget about request heuristics and just send all the requests
		interleaving allows "simulatenous" delivery of data on multiple streams

	HTTP/1.2 wordaround hacks
		CSS/JS concategnation
		spriting images
		domain sharding
			bad for network
			more dns lookups
			more contention
		all of these are unnecessary with prioritized multiplexing
	
	Connection Sharing
		share the same connections for different hostnames
		no need to establish new connections
		makes other SPDY features work better

	Server Push
		is already here, it's called "inlining"
			prevents a resource from being cached
			interferes with prioritization since the resource is inlined directly (often via data URLs)
		SPDY server push is better inlining
			pushed resources can be cached by the browser
			pushed resources can be canceled
		enables proxies like Amazon Silk to do "smart push"

	You can use SPDY for HTTP content...


Arnout Kazemier - Taking the Suck out of WebSuckets and Start Building those Fancy Pancy Applications - @3rdEden

	Extraordinary JavaScript Hybrid, founder of Observe.it and Lead Software Engineer at Nodejitsu. Loves real-time, Node.js, NoSQL & other bad-ass technologies

	RFC 6455 - Dec 2011

	WebSockets

	Supports latest RCFC 
		Chrome 20+, Firefox 12+, 

		known issues and their fixes
			Usage or detecting an HTTP proxy (AutoProxyDiscovery) crashes < Safari 5.1.4 and Mobile WebKit
				not feature detectable
					browser sniff
			Writing to a closed WebSocket connection can crash the browser & tabs
				send message every few minutes
			3G doesn't always work with WebSocket or causes a crash
				not detectable
					browser sniff and don't use mobile
			Pressing ESC in Firefox will drop the established connection. Even after the page has fuly loaded.
				Capture the event early on and prevent it...	
					listen to keydown, see if it's 27, then prevent it...

			Sending "invalid" UTF-8 can drop the connection, for example emoji's
				escape and encodeURI your data, yes... both.
					for example, if you're building a chat server
			Firefox doesn't connect to "ws://" from a http

			Safari doesn't allow you to connect using self-signed certificates
				if you do this in production, you are a nut head, but it can be annoying for development...

		It can get worse...
			connection blocking
				firewalls, anti-virus, browser-plugins
				3% of all requests on port 4000 were blocked
				enterprise proxies usually block everything except port 80, 443, 843
					and virus scanners usually target port 80 for scanning and blocking

		Recommendations
			always use SSL when 
			upgrade from fallbacks
				JSONP -> Polling -> Streaming -> Plugins -> WebSockets 
					you really should be deployed on multiple ports
					start at port 4000 , fall back to 843 , fallback to 443
			don't use WebSockets on mobile

		A huge front-end concern...
			How to remove a loading spinner from the top left 
				sharing is caring...

Firebase - `		 - @firebase



Jose de Castro - @loopingrage http://voxeolabs.com/ - https://www.tropo.com/home.jsp

 	WebRTC is a new API for embedding real-time communications into websites

	http://www.webrtc.org/

	Key Features
		camera and microphone access
		real-time media streaming
		peer-to-peer
		screen-sharing
		W3C Standard, Cross Browser
		Interoperable (Codecs, RTP, ICE)
		Super Secure

	What's Possible?
		add voice and video chat to social sites or company intranets
		build highly specialized chat networks
		real-time gaming data
		integrate with regular phone networks (PSTN)
		Live Events. Journalism.
		Next-Gen Contact Center

	Communications Value Chain
		Access
		Identity / Addressing
		Services
		Presentation


	For A <==> B, you have to create a session 
		You can use XMPP for the session description resolution

	Umm. Isn't that like SIP or JINGLE?
		http://en.wikipedia.org/wiki/Session_Initiation_Protocol
		The standards group decided not to require a signaling protocol
		WebRTC is all about media and leaves signlaing to the app
		Developers are free to 

	WebRTC address?
		Facebook example...
		there is no number or address...
		you just exchange blobs of intent to communicate

	What now?
		be active! join the mailing list!
		this is a huge opportunity!
		time to deconstruct communications





























